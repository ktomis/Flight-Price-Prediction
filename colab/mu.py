# -*- coding: utf-8 -*-
"""MU.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t48Zz5Z6MCwQ9bt_hG9xanyvqFc4LpH_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('cleaned_train_data.csv')
data.head(4)

data.info()

data['Duration'].value_counts()

data.isnull().sum()

# Kiểm tra dữ liệu trong các cột thời gian
print(data['Date_of_Journey'].unique())
print(data['Dep_Time'].unique())
print(data['Arrival_Time'].unique())

# Chuyển đổi cột Date_of_Journey thành datetime và tách ngày, tháng
data['Journey_Day'] = pd.to_datetime(data['Date_of_Journey'], format='%d/%m/%Y').dt.day
data['Journey_Month'] = pd.to_datetime(data['Date_of_Journey'], format='%d/%m/%Y').dt.month
data.drop(['Date_of_Journey'], axis=1, inplace=True)
data.head()

data['Dep_Hour'] = pd.to_datetime(data['Dep_Time'], format='%H:%M').dt.hour
data['Dep_Minute'] = pd.to_datetime(data['Dep_Time'], format='%H:%M').dt.minute
data.drop(['Dep_Time'], axis=1, inplace=True)
data.head()

data = data[data['Arrival_Time'].str.match(r'^\d{2}:\d{2}$')]
data.head()

data['Arrival_Hour'] = pd.to_datetime(data['Arrival_Time'], format='%H:%M').dt.hour
data['Arrival_Minute'] = pd.to_datetime(data['Arrival_Time'], format='%H:%M').dt.minute
data.drop(['Arrival_Time'], axis=1, inplace=True)
data.head()

data['Duration_Hours'] = data['Duration'].str.extract('(\d+)h').fillna(0).astype(int)
data['Duration_Minutes'] = data['Duration'].str.extract('(\d+)m').fillna(0).astype(int)
data['Total_Duration_Minutes'] = data['Duration_Hours'] * 60 + data['Duration_Minutes']
data.drop(['Duration'], axis=1, inplace=True)
data.head()

data.drop(['Route', 'Additional_Info'], axis=1, inplace=True)

data['Total_Stops'] = data['Total_Stops'].replace({
    'non-stop': 0,
    '1 stop': 1,
    '2 stops': 2,
    '3 stops': 3,
    '4 stops': 4
}).astype(int)
data.head()

# Mã hóa cột Airline
airline_dummies = pd.get_dummies(data['Airline'], drop_first=True)
data = pd.concat([data, airline_dummies], axis=1)

# Mã hóa cột Source
source_dummies = pd.get_dummies(data['Source'], drop_first=True)
data = pd.concat([data, source_dummies], axis=1)

# Mã hóa cột Destination
destination_dummies = pd.get_dummies(data['Destination'], drop_first=True)
data = pd.concat([data, destination_dummies], axis=1)

# Xóa các cột cũ sau khi mã hóa (không cần giữ lại vì đã mã hóa xong)
data.drop(columns=['Airline', 'Source', 'Destination'], inplace=True)
data.head()

data.isnull().sum()

data.shape

dataTest = pd.read_csv('cleaned_test_data.csv')
dataTest.head(4)

# Tách ngày và tháng từ Date_of_Journey
dataTest['Journey_Day'] = pd.to_datetime(dataTest['Date_of_Journey'], format='%d/%m/%Y').dt.day
dataTest['Journey_Month'] = pd.to_datetime(dataTest['Date_of_Journey'], format='%d/%m/%Y').dt.month

# Sửa lại các dòng để chỉ định định dạng
dataTest['Dep_Hour'] = pd.to_datetime(dataTest['Dep_Time'], format='%H:%M').dt.hour
dataTest['Dep_Minute'] = pd.to_datetime(dataTest['Dep_Time'], format='%H:%M').dt.minute

dataTest['Arrival_Time'] = dataTest['Arrival_Time'].str.extract(r'(\d{1,2}:\d{2})')

dataTest['Arrival_Hour'] = pd.to_datetime(dataTest['Arrival_Time'], format='%H:%M').dt.hour
dataTest['Arrival_Minute'] = pd.to_datetime(dataTest['Arrival_Time'], format='%H:%M').dt.minute

# Tách Duration
dataTest['Duration_Hour'] = dataTest['Duration'].str.extract(r'(\d+)h').fillna(0).astype(int)
dataTest['Duration_Minute'] = dataTest['Duration'].str.extract(r'(\d+)m').fillna(0).astype(int)

# Mã hóa các cột danh mục
airline_dummies = pd.get_dummies(dataTest['Airline'], drop_first=True)
source_dummies = pd.get_dummies(dataTest['Source'], drop_first=True)
destination_dummies = pd.get_dummies(dataTest['Destination'], drop_first=True)

dataTest = pd.concat([dataTest, airline_dummies, source_dummies, destination_dummies], axis=1)

# Xóa các cột không cần thiết
dataTest.drop(columns=['Airline', 'Source', 'Destination', 'Date_of_Journey', 'Dep_Time', 'Arrival_Time', 'Duration'], inplace=True)
dataTest.head()

data.shape, dataTest.shape

X = data.drop(columns=['Price'], axis=1)
y = data['Price']

X.head()

y.head()

print(data.dtypes)

plt.figure(figsize=(20, 20))
sns.heatmap(data.corr(), annot=True, cmap="RdYlGn")
plt.show()

"""# **Huấn Luyện Mô Hình Random Forest**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Chuẩn hóa dữ liệu
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Sau đó chia dữ liệu
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=51)

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor()
rfr.fit(X_train, y_train)

pred = rfr.predict(X_test)

train_score = rfr.score(X_train, y_train)  # Độ chính xác trên tập huấn luyện
test_score = rfr.score(X_test, y_test)    # Độ chính xác trên tập kiểm tra
print(f"Train Score: {train_score}")
print(f"Test Score: {test_score}")

sns.histplot(y_test - pred, kde=True, bins=30)
plt.xlabel('Sai lệch giá trị (y_test - y_pred)')
plt.ylabel('Mật độ')
plt.title('Phân Phối Phần Dư')
plt.show()

plt.scatter(y_test, pred, alpha=0.8)
plt.xlabel('Giá trị thực (y_test)')
plt.ylabel('Giá trị dự đoán (y_pred)')
plt.title('Biểu đồ So Sánh Giá Trị Thực và Dự Đoán')
plt.show()

from sklearn import metrics
print("MAE:", metrics.mean_absolute_error(y_test, pred))
print("MSE:", metrics.mean_squared_error(y_test, pred))
print("RMSE:", np.sqrt(metrics.mean_squared_error(y_test, pred)))
print("R² Score:", metrics.r2_score(y_test, pred))

"""# **Huấn Luyện Mô Hình Linear Regression**"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# Khởi tạo mô hình Linear Regression
lr_model = LinearRegression()

# Huấn luyện mô hình trên tập dữ liệu huấn luyện
lr_model.fit(X_train, y_train)

# Dự đoán trên tập dữ liệu kiểm tra
lr_pred = lr_model.predict(X_test)

print(X_train[:5])  # Hiển thị 5 hàng đầu tiên của X_train

sns.histplot(y_test - lr_pred, kde=True, bins=30)
plt.xlabel('Sai lệch giá trị (y_test - y_pred)')
plt.ylabel('Mật độ')
plt.title('Phân Phối Phần Dư')
plt.show()

plt.scatter(y_test, lr_pred, alpha=0.8)
plt.xlabel('Giá trị thực (y_test)')
plt.ylabel('Giá trị dự đoán (y_pred)')
plt.title('Biểu đồ So Sánh Giá Trị Thực và Dự Đoán')
plt.show()

# Tính các chỉ số
mae = mean_absolute_error(y_test, lr_pred)
mse = mean_squared_error(y_test, lr_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, lr_pred)

# In kết quả
print("Linear Regression Results:")
print("MAE:", mae)
print("MSE:", mse)
print("RMSE:", rmse)
print("R² Score:", r2)

"""# **Huấn Luyện Mô Hình XGBoost Regressor**"""

from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
xgb_model = XGBRegressor()
xgb_model.fit(X_train, y_train)

# Dự đoán và đánh giá mô hình
xgb_pred = xgb_model.predict(X_test)

sns.histplot(y_test - xgb_pred, kde=True, bins=30)
plt.xlabel('Sai lệch giá trị (y_test - y_pred)')
plt.ylabel('Mật độ')
plt.title('Phân Phối Phần Dư')
plt.show()

plt.scatter(y_test, xgb_pred, alpha=0.8)
plt.xlabel('Giá trị thực (y_test)')
plt.ylabel('Giá trị dự đoán (y_pred)')
plt.title('Biểu đồ So Sánh Giá Trị Thực và Dự Đoán')
plt.show()

# Tính các chỉ số
xgb_mae = mean_absolute_error(y_test, xgb_pred)
xgb_mse = mean_squared_error(y_test, xgb_pred)
xgb_rmse = np.sqrt(xgb_mse)
xgb_r2 = r2_score(y_test, xgb_pred)

print("XGBoost Regression Results:")
print(f"MAE: {xgb_mae}")
print(f"MSE: {xgb_mse}")
print(f"RMSE: {xgb_rmse}")
print(f"R² Score: {xgb_r2}")

"""# **So Sánh Tổng Thể 3 Mô Hình**"""

import matplotlib.pyplot as plt
import numpy as np

# Dữ liệu
mô_hình = ['Random Forest', 'Linear Regression', 'XGBoost']
MAE = [1154.98, 1889.21, 1097.76]
RMSE = [2420.84, 3014.31, 2020.33]
R2 = [0.7416, 0.5993, 0.8200]

# Biểu đồ 1: MAE và RMSE
x = np.arange(len(mô_hình))
chiều_rộng = 0.35
fig, ax1 = plt.subplots(figsize=(10, 6))

thanh1 = ax1.bar(x - chiều_rộng/2, MAE, chiều_rộng, label='MAE (Sai số tuyệt đối)', color='blue')
thanh2 = ax1.bar(x + chiều_rộng/2, RMSE, chiều_rộng, label='RMSE (Sai số bình phương)', color='orange')

# ax1.set_xlabel('Mô Hình', fontsize=12)
ax1.set_ylabel('Giá Trị Sai Số', fontsize=12)
ax1.set_title('So Sánh MAE và RMSE Giữa Các Mô Hình', fontsize=14)
ax1.set_xticks(x)
ax1.set_xticklabels(mô_hình, fontsize=12)
ax1.legend()

for i, v in enumerate(MAE):
    ax1.text(i - chiều_rộng/2, v + 50, f"{v:.2f}", ha='center', fontsize=10)
for i, v in enumerate(RMSE):
    ax1.text(i + chiều_rộng/2, v + 50, f"{v:.2f}", ha='center', fontsize=10)

plt.tight_layout()
plt.show()

# Biểu đồ 2: R^2
fig, ax2 = plt.subplots(figsize=(10, 6))
thanh3 = ax2.bar(mô_hình, R2, color='green', width=0.4)

# ax2.set_xlabel('Mô Hình', fontsize=12)
ax2.set_ylabel('$R^2$', fontsize=12)
ax2.set_title('So Sánh $R^2$ Giữa Các Mô Hình', fontsize=14)

for i, v in enumerate(R2):
    ax2.text(i, v + 0.02, f"{v:.2f}", ha='center', fontsize=10)

plt.tight_layout()
plt.show()

"""# **Mô Hình Hoàn Thiện**"""

import joblib

# Lưu mô hình XGBoost
joblib.dump(xgb_model, "xgboost_model.pkl")

"""*Flask API *"""

#==================== Flask API ====================#
#.....................................................

"""# Hyperparameter Tuning"""

from sklearn.model_selection import RandomizedSearchCV
from sklearn.ensemble import RandomForestRegressor
import numpy as np

param_grid = {
    'n_estimators': [int(x) for x in np.linspace(start=100, stop=1200, num=12)],  # Số lượng cây
    'max_features': ['sqrt', 'log2', None],  # Loại bỏ 'auto'
    'max_depth': [int(x) for x in np.linspace(5, 30, num=6)],  # Độ sâu của cây
    'min_samples_split': [2, 5, 10],  # Số lượng mẫu tối thiểu để tách
    'min_samples_leaf': [1, 2, 4]  # Số mẫu tối thiểu ở nút lá
}

# Tạo RandomizedSearchCV
rfr = RandomForestRegressor()
rfr_random = RandomizedSearchCV(
    estimator=rfr,
    param_distributions=param_grid,
    scoring='neg_mean_squared_error',
    n_iter=50,  # Giảm số lần thử nghiệm để tăng tốc độ
    cv=3,  # Cross-validation với 3 lần chia tập dữ liệu
    verbose=2,
    random_state=42,
    n_jobs=-1  # Sử dụng tất cả các CPU
)

# Huấn luyện với dữ liệu
rfr_random.fit(X_train, y_train)

print("Best Parameters:", rfr_random.best_params_)

best_model = rfr_random.best_estimator_
predictions = best_model.predict(X_test)

plt.figure(figsize=(8, 8))
sns.histplot(y_test - predictions, kde=True, bins=30)
plt.title("Error Distribution")
plt.xlabel("Error")
plt.ylabel("Density")
plt.show()

plt.figure(figsize=(8, 8))
plt.scatter(y_test, predictions, alpha=0.8)
plt.title("Predictions vs True Values")
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.show()

print("Mean Absolute Error (MAE):", metrics.mean_absolute_error(y_test, predictions))
print("Mean Squared Error (MSE):", metrics.mean_squared_error(y_test, predictions))
print("Root Mean Squared Error (RMSE):", np.sqrt(metrics.mean_squared_error(y_test, predictions)))
print("R2 Score:", metrics.r2_score(y_test, predictions))

from sklearn.model_selection import learning_curve
train_sizes, train_scores, test_scores = learning_curve(
    estimator=rfr_random.best_estimator_,
    X=X_train, y=y_train, cv=5,
    scoring='neg_mean_squared_error', n_jobs=-1)

train_mean = -train_scores.mean(axis=1)
test_mean = -test_scores.mean(axis=1)

plt.figure(figsize=(8, 8))
plt.plot(train_sizes, train_mean, label='Training Error', marker='o')
plt.plot(train_sizes, test_mean, label='Validation Error', marker='o')
plt.xlabel('Training Set Size')
plt.ylabel('MSE')
plt.title('Learning Curve')
plt.legend()
plt.show()